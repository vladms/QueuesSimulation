package testQueues;

import java.util.ArrayList;

import model.Task;

public class Scheduler {
	
	 public static final int MAX_WAITING_TIME = 25;

	private ArrayList<Server> serversList;
	private int numberOfServers;
	private int numberOfWorkingServers;
	
	public Scheduler(int numberOfServers){
		this.numberOfServers = numberOfServers;
		numberOfWorkingServers = 0;
		serversList = new ArrayList<Server>();
		for (int index = 0; index < numberOfServers; ++index){
			Server server = new Server(index);
			serversList.add(server);
			Thread th = new Thread(server);
			th.start();
		}
	}
	
	boolean dispatchTaskOnServer(Task task){
		boolean taskAddedToQueue = false;
		int index;
		for (index = 0; index < numberOfWorkingServers && taskAddedToQueue == false;++index){
			Server server = serversList.get(index);
			if (server.getProcessingTime() + task.getProcessTime() <= MAX_WAITING_TIME){
				taskAddedToQueue = true;
				server.addTAsk(task);
			}
		}
		for (;index < numberOfServers && taskAddedToQueue == false;++index){
			Server server = serversList.get(index);
			System.out.println("Server processing time: "+ server.getProcessingTime() + " task process time: " + task.getProcessTime() + "\n");
			if (server.getProcessingTime() + task.getProcessTime() <= MAX_WAITING_TIME){
				taskAddedToQueue = true;
				server.setUsed(true);
				server.addTAsk(task);
				numberOfWorkingServers++;
			}
		}
		System.out.println("Addedd? " + taskAddedToQueue);

		return taskAddedToQueue;
	}
	
	public void updateServers(){
		for (index = 0; index < numberOfWorkingServer;++index){
			Server server = serversList.get(index);
			if (server.getProcessingTime() + task.getProcessTime() <= MAX_WAITING_TIME){
				taskAddedToQueue = true;
				server.addTAsk(task);
			}
		}
	}
	
	public Task[][] getTasks(){
		Task[][] tasks = new Task[numberOfServers][];
		for (int index = 0; index < numberOfServers;index++){
			Server server = serversList.get(index);
			Task[] tasksFromServer = server.getTasks();
			tasks[index] = tasksFromServer;
		}
		return tasks;
	}
}
