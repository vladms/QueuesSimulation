package testQueues;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

import model.Task;

public class Server implements Runnable {
	private int ID;
	private boolean used = false;
	BlockingQueue<Task> bq;
	private AtomicInteger waitingTime;

	public Server(int ID) {
		this.ID = ID;
		bq = new LinkedBlockingQueue<Task>();
		waitingTime = new AtomicInteger(0);
	}

	public void run() {
		while (true) {
			Task t;
			try {
				t = bq.take();
				Thread.sleep(t.getProcessTime() * 1000);
				waitingTime.addAndGet(t.getProcessTime() * (-1));

			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}
	
	public void addTAsk(Task task){
		bq.add(task);
		waitingTime.addAndGet(task.getProcessTime());
	}
	
	public Task[] getTasks(){
		Task[] tasks = new Task[bq.size()];
		bq.toArray(tasks);
		return tasks;
	}

	public int getID() {
		return ID;
	}

	public void setID(int iD) {
		ID = iD;
	}

	public boolean isUsed() {
		return used;
	}

	public void setUsed(boolean used) {
		this.used = used;
	}
	
	public int getTimeOfProcessing(){
		int time = 0;
		for (Task task: bq){
			
		}
		return time;
	}
}